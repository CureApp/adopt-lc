// Generated by CoffeeScript 1.9.0

/**
calculates Todai score

@class TodaiScore
@module HandlingLiverCirrhosis
 */

(function() {
  var TodaiScore;

  TodaiScore = (function() {

    /**
    constructor
    
    @constructor
    @param {Number} age
    @param {String} childPughScore
    @param {Number} charlsonComorbidityScore
    @param {Number} durationOfAnesthesia unit: minutes
     */
    function TodaiScore(_at_age, _at_childPughScore, _at_charlsonComorbidityScore, _at_durationOfAnesthesia) {
      this.age = _at_age;
      this.childPughScore = _at_childPughScore;
      this.charlsonComorbidityScore = _at_charlsonComorbidityScore;
      this.durationOfAnesthesia = _at_durationOfAnesthesia;
    }

    TodaiScore.prototype.getScore = function() {
      var name, score, scorePart, scores;
      score = 0;
      scores = {
        age: this.constructor.getScoreByAge(this.age),
        childPugh: this.constructor.getScoreByChildPughScore(this.childPughScore),
        charlson: this.constructor.getScoreByCharlsonComorbidityScore(this.charlsonComorbidityScore),
        anesthesia: this.constructor.getScoreByDurationOfAnesthesia(this.durationOfAnesthesia)
      };
      for (name in scores) {
        scorePart = scores[name];
        score += scorePart;
      }
      return score;
    };


    /**
    get mortality by this score
    
    @method getMortality
    @static
    returns mortality
     */

    TodaiScore.prototype.getMortality = function() {
      var score;
      score = this.getScore();
      return this.constructor.getMortalityByScore(score);
    };


    /**
    get score parts by age
    
    @method getScoreByAge
    @private
    @static
    @param {Number} age
    @return {Number} score
     */

    TodaiScore.getScoreByAge = function(age) {
      if (age > 60) {
        return 1;
      } else {
        return 0;
      }
    };


    /**
    get score parts by Child-Pugh score
    
    @method getScoreByChildPughScore
    @private
    @static
    @param {String} childPughScore A|B|C
    @return {Number} score
     */

    TodaiScore.getScoreByChildPughScore = function(childPughScore) {
      switch (childPughScore) {
        case 'A':
          return 0;
        case 'B':
          return 1;
        case 'C':
          return 4;
        default:
          throw new Error("invalid Child-Pugh score, " + childPughScore);
      }
    };


    /**
    get score parts by Charlson Comorbidity score
    
    @method getScoreByCharlsonComorbidityScore
    @private
    @static
    @param {Number} charlsonComorbidityScore
    @return {Number} score
     */

    TodaiScore.getScoreByCharlsonComorbidityScore = function(charlsonComorbidityScore) {
      if (charlsonComorbidityScore <= 2) {
        return 0;
      } else if (charlsonComorbidityScore <= 5) {
        return 1;
      } else {
        return 2;
      }
    };


    /**
    get score parts by duration of anesthesia(min)
    
    @method getScoreByDurationOfAnesthesia
    @private
    @static
    @param {Number} durationOfAnesthesia
    @return {Number} score
     */

    TodaiScore.getScoreByDurationOfAnesthesia = function(durationOfAnesthesia) {
      if (durationOfAnesthesia <= 180) {
        return 0;
      } else if (durationOfAnesthesia <= 420) {
        return 1;
      } else {
        return 2;
      }
    };


    /**
    get mortality by score
    
    @method getMortality
    @private
    @static
    returns mortality
     */

    TodaiScore.getMortalityByScore = function(score) {
      var mortality, table;
      table = {
        0: 0,
        1: 0,
        2: 0.8,
        3: 1.0,
        4: 5.7,
        5: 7.5,
        6: 13.6,
        7: 23.3,
        8: 33.3,
        9: 50.0
      };
      mortality = table[score];
      if (mortality == null) {
        throw new Error('invalid score. score must be integer and ranged in 0 - 9');
      }
      return mortality;
    };

    return TodaiScore;

  })();

  module.exports = TodaiScore;

}).call(this);
