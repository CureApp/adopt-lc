// Generated by CoffeeScript 1.9.0

/**
calculates Child-Pugh score

@class ChildPughClassification
@module HandlingLiverCirrhosis
 */

(function() {
  var ChildPughClassification;

  ChildPughClassification = (function() {

    /**
    constructor
    
    @constructor
    @param {Number} freqOfEncephalopathy 1|2|3
    @param {Number} degreeOfAscites 1|2|3
    @param {Number} totalBillirubin [mg/dl]
    @param {Number} albumin [g/dl]
    @param {Number} prothrombinTime [%]
     */
    function ChildPughClassification(_at_freqOfEncephalopathy, _at_degreeOfAscites, _at_totalBillirubin, _at_albumin, _at_prothrombinTime) {
      this.freqOfEncephalopathy = _at_freqOfEncephalopathy;
      this.degreeOfAscites = _at_degreeOfAscites;
      this.totalBillirubin = _at_totalBillirubin;
      this.albumin = _at_albumin;
      this.prothrombinTime = _at_prothrombinTime;
    }


    /**
    get Child-Pugh score (A, B, C)
    
    @method getScore
    @return {String} score A|B|C
     */

    ChildPughClassification.prototype.getScore = function() {
      var point;
      point = this.getPoint();
      return this.constructor.getScoreByPoint(point);
    };


    /**
    calculate point by parameters
    
    @method getPoint
    @private
    returns {Number} point
     */

    ChildPughClassification.prototype.getPoint = function() {
      var name, point, pointPart, points;
      point = 0;
      points = {
        encephalopathy: this.constructor.getPointByEncephalopathy(this.freqOfEncephalopathy),
        ascites: this.constructor.getPointByAscites(this.degreeOfAscites),
        billirubin: this.constructor.getPointByTotalBillirubin(this.totalBillirubin),
        albumin: this.constructor.getPointByAlbumin(this.albumin),
        prothrombin: this.constructor.getPointByProthrombinTime(this.prothrombinTime)
      };
      for (name in points) {
        pointPart = points[name];
        point += pointPart;
      }
      return point;
    };


    /**
    get score by point
    
    @method getScoreByPoint
    @private
    @static
    @param {Number} point
    @return {String} score
     */

    ChildPughClassification.getScoreByPoint = function(point) {
      if (point <= 6) {
        return 'A';
      } else if (point <= 9) {
        return 'B';
      } else {
        return 'C';
      }
    };


    /**
    get point parts by encephalopathy
    
    @method getPointByEncephalopathy
    @private
    @static
    @param {Number} freqOfEncephalopathy
    @return {Number} point
     */

    ChildPughClassification.getPointByEncephalopathy = function(freqOfEncephalopathy) {
      return Math.min(Math.max(freqOfEncephalopathy, 1), 3);

      /*
      switch freqOfEncephalopathy
          when 1
              return 1
          when 2
              return 2
          when 3
              return 3
       */
    };


    /**
    get point parts by ascites
    
    @method getPointByAscites
    @private
    @static
    @param {Number} degreeOfAscites
    @return {Number} point
     */

    ChildPughClassification.getPointByAscites = function(degreeOfAscites) {
      return Math.min(Math.max(degreeOfAscites, 1), 3);

      /*
      switch degreeOfAscites
          when 1
              return 1
          when 2
              return 2
          when 3
              return 3
       */
    };


    /**
    get point parts by total billirubin
    
    @method getPointByTotalBillirubin
    @private
    @static
    @param {Number} totalBillirubin
    @return {Number} point
     */

    ChildPughClassification.getPointByTotalBillirubin = function(totalBillirubin) {
      if (totalBillirubin < 2.0) {
        return 1;
      } else if (totalBillirubin <= 3.0) {
        return 2;
      } else {
        return 3;
      }
    };


    /**
    get point parts by albumin
    
    @method getPointByAlbumin
    @private
    @static
    @param {Number} albumin
    @return {Number} point
     */

    ChildPughClassification.getPointByAlbumin = function(albumin) {
      if (albumin > 3.5) {
        return 1;
      } else if (albumin >= 2.8) {
        return 2;
      } else {
        return 3;
      }
    };


    /**
    get point parts by prothrombin time
    
    @method getPointByProthrombinTime
    @private
    @static
    @param {Number} prothrombinTime
    @return {Number} point
     */

    ChildPughClassification.getPointByProthrombinTime = function(prothrombinTime) {
      if (prothrombinTime > 70) {
        return 1;
      } else if (prothrombinTime >= 40) {
        return 2;
      } else {
        return 3;
      }
    };

    return ChildPughClassification;

  })();

  module.exports = ChildPughClassification;

}).call(this);
